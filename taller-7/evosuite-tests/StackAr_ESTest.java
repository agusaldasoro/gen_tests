/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 05 15:17:10 ART 2016
 */


import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;


public class StackAr_ESTest  {

  @Test
  public void test00()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.top();
      assertEquals(1, stackAr0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      Integer integer0 = new Integer(1486);
      stackAr0.push(integer0);
      int int0 = stackAr0.size();
      assertEquals(1, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.pop();
      assertTrue(stackAr0.isEmpty());
  }

  @Test
  public void test03()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      Integer integer0 = new Integer(1486);
      stackAr0.push(integer0);
      stackAr0.top();
      assertEquals(1, stackAr0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertFalse(stackAr0.isFull());
      
      Integer integer0 = new Integer(1486);
      stackAr0.push(integer0);
      boolean boolean0 = stackAr0.isFull();
      assertEquals(1, stackAr0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.isFull();
      assertEquals(0, stackAr0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      stackAr0.isEmpty();
      assertEquals(1, stackAr0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      int int0 = stackAr0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push("[]");
      stackAr0.push("[[]]");
      stackAr0.toString();
      assertEquals(2, stackAr0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackAr", e);
      }
  }

  @Test
  public void test10()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackAr", e);
      }
  }

  @Test
  public void test11()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      Integer integer0 = new Integer(1);
      try { 
        stackAr0.push(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackAr", e);
      }
  }

  @Test
  public void test12()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.isEmpty();
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackAr", e);
      }
  }

  @Test
  public void test14()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      assertEquals(1, stackAr0.size());
      
      stackAr0.pop();
      assertEquals(0, stackAr0.size());
  }

	@Test
	public void test00_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.push((Object) null);
		stackAr0.top();
		assertEquals(1, stackAr0.size());
	}

	@Test
	public void test01_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		Object object0 = new Object();
		stackAr0.push(object0);
		int int0 = stackAr0.size();
		assertEquals(1, int0);
	}

	@Test
	public void test02_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.push((Object) null);
		stackAr0.pop();
		assertEquals(0, stackAr0.size());
	}

	@Test
	public void test03_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.isFull();
		assertTrue(stackAr0.isEmpty());
	}

	@Test
	public void test04_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		try {
			stackAr0.increaseCapacity(0);
			fail("Expecting exception: IllegalArgumentException");
		} catch (IllegalArgumentException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test05_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.push(stackAr0);
		stackAr0.pop();
		assertEquals(0, stackAr0.size());
	}

	@Test
	public void test06_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		int int0 = stackAr0.size();
		assertEquals(0, int0);
	}

	@Test
	public void test07_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		try {
			stackAr0.top();
			fail("Expecting exception: IllegalStateException");
		} catch (IllegalStateException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test08_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		Object object0 = new Object();
		stackAr0.push(object0);
		stackAr0.push(object0);
		stackAr0.toString();
		assertEquals(2, stackAr0.size());
	}

	@Test
	public void test09_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.push(stackAr0);
		stackAr0.top();
		assertEquals(1, stackAr0.size());
	}

	@Test
	public void test10_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		try {
			stackAr0.pop();
			fail("Expecting exception: IllegalStateException");
		} catch (IllegalStateException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test11_1() throws Throwable {
		StackAr stackAr0 = new StackAr(0);
		try {
			stackAr0.push(stackAr0);
			fail("Expecting exception: IllegalStateException");
		} catch (IllegalStateException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test12_1() throws Throwable {
		StackAr stackAr0 = new StackAr(0);
		boolean boolean0 = stackAr0.isFull();
		assertTrue(boolean0);
	}

	@Test
	public void test13_1() throws Throwable {
		StackAr stackAr0 = new StackAr(2029);
		boolean boolean0 = stackAr0.isEmpty();
		assertTrue(boolean0);
	}

	@Test
	public void test14_1() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.push(stackAr0);
		boolean boolean0 = stackAr0.isEmpty();
		assertEquals(1, stackAr0.size());
		assertFalse(boolean0);
	}

	@Test
	public void test15() throws Throwable {
		StackAr stackAr0 = null;
		try {
			stackAr0 = new StackAr((-185));
			fail("Expecting exception: IllegalArgumentException");
		} catch (IllegalArgumentException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test16() throws Throwable {
		StackAr stackAr0 = new StackAr(259);
		try {
			stackAr0.increaseCapacity((-1442));
			fail("Expecting exception: IllegalArgumentException");
		} catch (IllegalArgumentException e) {
			assertThrownBy("StackAr", e);
		}
	}

	@Test
	public void test17() throws Throwable {
		StackAr stackAr0 = new StackAr();
		stackAr0.increaseCapacity(2667);
		assertTrue(stackAr0.isEmpty());
	}
	
	@Test
	public void testAgus1() throws Throwable {
		StackAr stackAr0 = new StackAr(1);
	    Integer integer0 = new Integer(1486);
	    stackAr0.push(integer0);
		stackAr0.increaseCapacity(10);
	    Integer integer1 = new Integer(2);
	    stackAr0.push(integer1);
		assertEquals(2, stackAr0.size());
	}
	
	@Test
	public void testAgus2() throws Throwable {
		StackAr stackAr0 = new StackAr(1);
	    Integer integer0 = new Integer(1486);
	    stackAr0.push(integer0);
		stackAr0.increaseCapacity(10);
	    Integer integer1 = new Integer(2);
	    stackAr0.push(integer1);
	    stackAr0.pop();
		assertEquals(1, stackAr0.size());
	}
	
	@Test
	public void testAgus3() throws Throwable {
		StackAr stackAr0 = new StackAr(1);
	    Integer integer0 = new Integer(1486);
	    stackAr0.push(integer0);
		stackAr0.increaseCapacity(10);
	    Integer integer1 = new Integer(2);
	    stackAr0.push(integer1);
		assertEquals(integer1, stackAr0.top());
	}
}
