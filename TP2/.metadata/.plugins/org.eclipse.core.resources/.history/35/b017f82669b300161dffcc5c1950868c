import time

startTime = time.time()

# stdlib imports
import sys
import pyntch_wrapper
import pyntch
import os
import test_generator
import test_executor
import test_writer
import coverage 
import ast
import random


populationSize = 50
eliteSize = 1
testSuiteLength= 40
crossoverProbability=0.75
mutationProbability=0.75
addNewTestProbability=0.33
modifyExistingTestProbability=0.33
removeExistingTestProbability=0.33

class EvoPy:
    def __init__(self):
        pass

    def generate_tests(self, targetPyFile, maxGenerations, maxTime, output_dir, random_seed):

        pyntch_wrapper.setup()
        pyFilename = os.getcwd() + targetPyFile
        outFilename = os.getcwd() + output_dir
        module = pyntch_wrapper.addFile(pyFilename)
        pyntch_wrapper.runAnalysis()
        
        iterCount = 0
        tests = []
        
        total_lines = line_counter(pyFilename)
        total_branches_lines = branch_lines(pyFilename)
        total_branches = branch_counter(pyFilename)
  
        lines_visited = set()
        branches_visited = set()   
        
        random.seed(random_seed)
        
        maxIterations = 100
        
        while (iterCount < maxIterations):   
            for f in module.children:
                if isinstance(f, pyntch.function.FuncType) and f.name[0] != "_":
                    # Initialize a new Total Coverage
                    totalCoverage = coverage.TotalCoverage(pyFilename)    
                    totalCoverage.total_lines = total_lines
                    totalCoverage.branches_lines = total_branches_lines
                    totalCoverage.total_branches = total_branches
                    
                    g = test_generator.TestGenerator(f,random_seed)
                    
                    func_tuple = g.generate_new_test_call()
                    testCall = test_executor.TestCall(func_tuple[0], func_tuple[1])
                    testExecutor = test_executor.TestExecutor(pyFilename)
                    
                    sys.settrace(totalCoverage.traceit)
                    res = testExecutor.execute(testCall)
                    sys.settrace(None)

                    if res is TypeError:
                        continue

                    new_lines_visited = lines_visited.union(totalCoverage.lines_visited)
                    new_branches_visited = branches_visited.union(totalCoverage.branches_visited)

                    if len(new_lines_visited) > len(lines_visited) or len(new_branches_visited) > len(branches_visited):
                        lines_visited = new_lines_visited
                        branches_visited = new_branches_visited
                        tests.append(testExecutor)
                        testWriter = test_writer.TestWriter(outFilename, f.name)
                        testWriter.writeToFile(testCall, iterCount)
            iterCount += 1

        line_coverage = 100 * float(len(lines_visited))/float(total_lines)
        print("Line Coverage:", line_coverage)
        branch_coverage = 100 * float(len(branches_visited))/float(total_branches)
        print("Branch Coverage:", branch_coverage)

    
if __name__ == "__main__":
    if len(sys.argv) != 6:
        print("Usage <targetPyFile> <maxIterations> <maxTime> <outputDir> <randomSeed>")
        sys.exit()
    
    # load the cli arguments
    targetPyFile = sys.argv[1]
    maxGenerations = int(sys.argv[2])
    maxTime = float(sys.argv[3])
    output_dir = sys.argv[4]
    random_seed = int(sys.argv[5])

    evoPy = EvoPy()
    evoPy.generate_tests(targetPyFile, maxGenerations, maxTime, output_dir, random_seed)
    
