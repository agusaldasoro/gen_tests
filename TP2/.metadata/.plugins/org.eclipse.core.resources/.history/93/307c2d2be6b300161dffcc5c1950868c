import time

startTime = time.time()

# stdlib imports
import sys
import pyntch_wrapper
import pyntch
import os
import test_generator
import test_executor
import test_writer
import coverage 
import ast
import random


populationSize = 50
eliteSize = 1
testSuiteLength= 40
crossoverProbability=0.75
mutationProbability=0.75
addNewTestProbability=0.33
modifyExistingTestProbability=0.33
removeExistingTestProbability=0.33

class EvoPy:
    def __init__(self):
        pass

    def generate_tests(self, targetPyFile, maxGenerations, maxTime, output_dir, random_seed):

        pyntch_wrapper.setup()
        pyFilename = os.getcwd() + targetPyFile
        outFilename = os.getcwd() + output_dir
        module = pyntch_wrapper.addFile(pyFilename)
        pyntch_wrapper.runAnalysis()
        
        total_lines = line_counter(pyFilename)
        total_branches_lines = branch_lines(pyFilename)
        total_branches = branch_counter(pyFilename)
        testExecutor = test_executor.TestExecutor(pyFilename)
                        
        lines_visited = set()
        branches_visited = set()   
        
        random.seed(random_seed)
          
        iterCount = 0
        current_population = []
              
        # RANDOM TESTING
        maxIterations = 100
        while (iterCount < maxIterations):  
            test_suite =  []
            maxIterations = 10
            iterCount2 = 0
            while (iterCount2 < maxIterations):
                for f in module.children:
                    if isinstance(f, pyntch.function.FuncType) and f.name[0] != "_":
                        g = test_generator.TestGenerator(f,random_seed)
                        func_tuple = g.generate_new_test_call()
                        testCall = test_executor.TestCall(func_tuple[0], func_tuple[1])
                        test_suite.append(testCall)
                iterCount2 += 1
            current_population.append(test_suite)
            iterCount += 1

        limitTime = time.time() + maxTime
        while (time.time() < limitTime):
            Z = select_elite(current_population)
            while(len(Z) < len(current_population)):
                parents = rank_selection(Z)
                crossover_probability = random.random()
                if (crossover_probability <= crossoverProbability):
                    o1_o2 = crossover(parents)
                else:
                    o1_o2 = parents
                mutate(o1_o2)
                
                fitnessP1 = (pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, p1)
                fitnessP2 = (pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, p2)
                fitnessO1 = (pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, o1)
                fitnessO2 = (pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, o2)
                
                fp = min(fitnessP1, fitnessP2)
                fo = min(fitnessO1, fitnessO1)
                
                lp = len(p1) + len(p2)
                lo = len(o1) + len(o2)
                
                lenTb = len_best_individual(current_population)
                
                if (fo < fp or (fo == fp and lo <= lp)):
                    if (len(o1)<= 2 * lenTb):
                        Z.append(o1)
                    if (len(o2)<= 2 * lenTb):
                        Z.append(o2)
            current_population = Z

def rank_selection(pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, testSuites):
    min_fitness1 = len(total_lines) + total_branches_lines
    min_fitness2 = min_fitness1
    testSuite1 = testSuites[0]
    testSuite2 = testSuites[1]
    for test_suite in testSuites:
        current_fitness = fitness(pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, test_suite)
        if current_fitness < min_fitness1:
            min_fitness1 = current_fitness
            testSuite1 = test_suite
        else:
            if current_fitness < min_fitness2:
                min_fitness2 = current_fitness
                testSuite2 = test_suite
    return <testSuite1, testSuite2>

def fitness(pyFileName, total_lines, total_branches_lines, total_branches, testExecutor, totalLines, totalBranches, testSuite):
    lines_visited = set()
    branches_visited = set()   
    for test_case in testSuite:
        totalCoverage = coverage.TotalCoverage(pyFilename)    
        totalCoverage.total_lines = total_lines
        totalCoverage.branches_lines = total_branches_lines
        totalCoverage.total_branches = total_branches
        sys.settrace(totalCoverage.traceit)
        res = testExecutor.execute(testCall)
        sys.settrace(None)
        
        new_lines_visited = lines_visited.union(totalCoverage.lines_visited)
        new_branches_visited = branches_visited.union(totalCoverage.branches_visited)
    
    return len(total_lines) + total_branches_lines - len(lines_visited) - len(branches_visited)

class LineCounter(ast.NodeVisitor):
    def __init__(self):
        self.lines = set()

    def generic_visit(self, node):
        if hasattr(node, "lineno"):
            self.lines.add(node.lineno)
        ast.NodeVisitor.generic_visit(self, node)

class BranchCounter(ast.NodeVisitor):
    def __init__(self):
        self.branches = 0
        self.branches_lines = set()

    def visit_If(self, node):
        self.branches += 2
        self.branches_lines.add(node.body[0].lineno)
        if len(node.orelse) > 0:
            self.branches_lines.add(node.orelse[0].lineno)
        self.branches_lines.add(node.body[-1].lineno + 1)
        self.generic_visit(node)

    def visit_While(self, node):
        self.branches += 2
        print(node.body[-1].lineno + 1)
        self.branches_lines.add(node.body[0].lineno)
        self.branches_lines.add(node.body[-1].lineno + 1)
        self.generic_visit(node)

    def visit_For(self, node):
        self.branches += 2
        self.branches_lines.add(node.body[0].lineno)
        self.branches_lines.add(node.body[-1].lineno + 1)
        self.generic_visit(node)
        
def line_counter(pyFilename):
    root = ast.parse(open(pyFilename).read())
    v = LineCounter()
    v.visit(root)
    return len(v.lines)

def branch_counter(pyFilename):
    root = ast.parse(open(pyFilename).read())
    v = BranchCounter()
    v.visit(root)
    return v.branches

def branch_lines(pyFilename):
    root = ast.parse(open(pyFilename).read())
    v = BranchCounter()
    v.visit(root)
    return v.branches_lines
  
if __name__ == "__main__":
    if len(sys.argv) != 6:
        print("Usage <targetPyFile> <maxGenerations> <maxTime> <outputDir> <randomSeed>")
        sys.exit()
    
    # load the cli arguments
    targetPyFile = sys.argv[1]
    maxGenerations = int(sys.argv[2])
    maxTime = float(sys.argv[3])
    output_dir = sys.argv[4]
    random_seed = int(sys.argv[5])

    evoPy = EvoPy()
    evoPy.generate_tests(targetPyFile, maxGenerations, maxTime, output_dir, random_seed)
    
